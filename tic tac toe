import tkinter as tk
from tkinter import messagebox
import random

class TicTacToeGUI:
    def _init_(self):
        self.root = tk.Tk()
        self.root.title("Tic-Tac-Toe")

        self.current_player = 'X'
        self.board = [[' ' for _ in range(3)] for _ in range(3)]

        self.buttons = [[None for _ in range(3)] for _ in range(3)]

        for i in range(3):
            for j in range(3):
                self.buttons[i][j] = tk.Button(self.root, text='', font=('Arial', 20), width=5, height=2,
                                               command=lambda row=i, col=j: self.on_click(row, col))
                self.buttons[i][j].grid(row=i, column=j)

    def on_click(self, row, col):
        if self.board[row][col] == ' ' and self.current_player == 'X':
            self.board[row][col] = 'X'
            self.buttons[row][col].config(text='X', state='disabled')
            if self.check_winner():
                messagebox.showinfo("Game Over", "You win!")
                self.reset_game()
            elif self.check_draw():
                messagebox.showinfo("Game Over", "It's a draw!")
                self.reset_game()
            else:
                self.switch_player()
                self.make_ai_move()

    def make_ai_move(self):
        if self.current_player == 'O':
            row, col = self.best_move()
            self.board[row][col] = 'O'
            self.buttons[row][col].config(text='O', state='disabled')
            if self.check_winner():
                messagebox.showinfo("Game Over", "AI wins!")
                self.reset_game()
            elif self.check_draw():
                messagebox.showinfo("Game Over", "It's a draw!")
                self.reset_game()
            else:
                self.switch_player()

    def best_move(self):
        empty_cells = [(i, j) for i in range(3) for j in range(3) if self.board[i][j] == ' ']
        return random.choice(empty_cells) if empty_cells else (-1, -1)

    def check_winner(self):
        for i in range(3):
            if all(cell == self.current_player for cell in self.board[i]) or all(
                    self.board[j][i] == self.current_player for j in range(3)):
                return True
        if all(self.board[i][i] == self.current_player for i in range(3)) or all(
                self.board[i][2 - i] == self.current_player for i in range(3)):
            return True
        return False

    def check_draw(self):
        return all(cell != ' ' for row in self.board for cell in row)

    def switch_player(self):
        self.current_player = 'O' if self.current_player == 'X' else 'X'

    def reset_game(self):
        for i in range(3):
            for j in range(3):
                self.board[i][j] = ' '
                self.buttons[i][j].config(text='', state='active')
        self.current_player = 'X'

    def run(self):
        self.root.mainloop()

if _name_ == "_main_":
    game = TicTacToeGUI()
    game.run()
